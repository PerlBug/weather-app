[{"/Users/mko/Documents/weather-app/src/index.tsx":"1","/Users/mko/Documents/weather-app/src/serviceWorker.ts":"2","/Users/mko/Documents/weather-app/src/App.tsx":"3","/Users/mko/Documents/weather-app/src/components/Button.tsx":"4","/Users/mko/Documents/weather-app/src/components/Input.tsx":"5","/Users/mko/Documents/weather-app/src/components/WeatherDisplay.tsx":"6"},{"size":563,"mtime":1612140832000,"results":"7","hashOfConfig":"8"},{"size":5278,"mtime":1612139994000,"results":"9","hashOfConfig":"8"},{"size":7076,"mtime":1612158869000,"results":"10","hashOfConfig":"8"},{"size":526,"mtime":1612159045000,"results":"11","hashOfConfig":"8"},{"size":438,"mtime":1612139994000,"results":"12","hashOfConfig":"8"},{"size":1142,"mtime":1612139994000,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"o2c676",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/mko/Documents/weather-app/src/index.tsx",[],["28","29"],"/Users/mko/Documents/weather-app/src/serviceWorker.ts",[],"/Users/mko/Documents/weather-app/src/App.tsx",["30"],"import React from \"react\";\nimport Button from \"./components/Button\";\nimport Input from \"./components/Input\";\nimport Axios from \"axios\";\nimport { IMetaForecast, IMetaLocation } from \"./types/metaWeather\";\nimport { useToasts } from \"react-toast-notifications\";\nimport WeatherDisplay from \"./components/WeatherDisplay\";\nimport ReactLoading from 'react-loading';\n\n\nfunction App() {\n  const { addToast } = useToasts(); //hook for using react toast\n\n  const [location, setLocation] = React.useState<string>(\"\");\n  const [loading, setLoading] = React.useState<boolean>(false);\n  const [weatherLoading, setWeatherLoading] = React.useState<boolean>(false);\n  //this will hold the data returned from the location search API\n  const [locationResults, setLocationResults] = React.useState<IMetaLocation[]>(\n    []\n  );\n  //this contains the selected city\n  const [selectedCity, setSelectedCity] = React.useState<IMetaLocation>({});\n\n  //this holds forecast for selected location\n  const [forecast, setForecast] = React.useState<IMetaForecast[]>([]);\n\n\n  React.useEffect(()=>{\n    if (\"geolocation\" in navigator) {\n      getClientLocation();\n    }\n  },[])\n\n  //prompts user to get their coordinates\n  function getClientLocation(){\n    navigator.geolocation.getCurrentPosition(function(position) {\n      if(position?.coords?.latitude){\n        const {latitude, longitude} = position?.coords;\n        fetchLocationWithCoordinates(latitude, longitude);\n      }\n    });\n  }\n\n  async function fetchLocationWithCoordinates(lat: number, lng: number){\n    try {\n      setLoading(true);\n      //we are using CORS Anywhere proxy to bypass the CORS problem for now\n      //ideally we would route this through our own API service\n      const data: IMetaLocation[] = (\n        await Axios.get(\n          `https://cors-anywhere.herokuapp.com/https://www.metaweather.com/api/location/search/?lattlong=${lat},${lng}`\n        )\n      ).data;\n      //if locations returned, display error\n      if(data[0]?.latt_long){\n        handleCitySelect(data[0]);\n\n      }\n      setLoading(false);\n     // setLocationResults(data);\n    } catch (err) {\n      setLoading(false);\n      errorToast(err.toString());\n      throw err;\n    }\n  }\n\n  //clears all state\n  function clearLocationState() {\n    setForecast([]);\n    setLocationResults([]);\n    setSelectedCity({});\n    setLoading(false);\n  }\n\n  function onLocationChange(e: any) {\n    setLocation(e.target.value);\n  }\n\n  function handleSubmit() {\n    clearLocationState();\n    //if no location, we return and toast error\n    if (!location) return errorToast(\"Please enter a city\");\n\n    fetchLocationData(location);\n  }\n\n  //renders an error toast on the screen\n  function errorToast(msg: string) {\n    addToast(msg, {\n      appearance: \"error\",\n      autoDismiss: true,\n    });\n  }\n\n  //fetch forecast data for given location\n  async function fetchWeatherData(l: IMetaLocation) {\n    try {\n      setWeatherLoading(true);\n      const data: any = (\n        await Axios.get(\n          `https://cors-anywhere.herokuapp.com/https://www.metaweather.com/api/location/${l.woeid}`\n        )\n      ).data;\n      if (data?.consolidated_weather?.length) {\n        setForecast(data.consolidated_weather.slice(0, 4));\n      }\n      setWeatherLoading(false);\n    } catch (err) {\n      setWeatherLoading(false);\n      errorToast(err.toString());\n      throw err;\n    }\n  }\n\n  //will fetch the location data and set it to local state\n  async function fetchLocationData(location: string) {\n    try {\n      setLoading(true);\n      //we are using CORS Anywhere proxy to bypass the CORS problem for now\n      //ideally we would route this through our own API service\n      const data: IMetaLocation[] = (\n        await Axios.get(\n          `https://cors-anywhere.herokuapp.com/https://www.metaweather.com/api/location/search/?query=${location}`\n        )\n      ).data;\n      //if locations returned, display error\n      if (!data || !data.length) {\n        errorToast(\"City not found. Please try again.\");\n      } else if (data.length === 1) {\n        //if there is only 1 city, we set the selected city to this one\n        handleCitySelect(data[0]);\n      }\n      setLoading(false);\n      setLocationResults(data);\n    } catch (err) {\n      setLoading(false);\n      errorToast(err.toString());\n      throw err;\n    }\n  }\n\n  function handleCitySelect(l: IMetaLocation) {\n    setLocation(l?.title || '');\n    setSelectedCity(l);\n    fetchWeatherData(l); //fetch forecast data for this city\n  }\n\n  return (\n    <div className=\"flex flex-col h-full items-center pt-20 text-white bg-gradient-to-br from-gray-600 via-teal-700 to-gray-800\">\n      <div className=\"flex items-center \">\n        <h3 className=\"text-4xl font-light\">Weather Forecast</h3>\n      </div>\n      <div>\n        <h3 className=\"text-1xl font-light\">\n          Get the latest weather forecast in your area!\n        </h3>\n      </div>\n      <div className=\"mt-6\">\n        <Input\n          value={location}\n          onChange={onLocationChange}\n          placeholder=\"Enter your city\"\n        />\n        <Button onClick={handleSubmit} loading={loading}>\n          Submit\n        </Button>\n      </div>\n      <div className=\"mt-3\">\n        {/* Once the city has been selected, display it here */}\n        {selectedCity?.title && (\n          <div className=\"text-center\">\n            <h3 className=\"text-lg\">\n              Showing forecast for {selectedCity?.title}\n            </h3>\n          </div>\n        )}\n        {/* If more than one city has been found, we ask the user which one they want to select */}\n        {locationResults.length > 1 && !selectedCity?.title && (\n          <div className=\"flex flex-col items-center\">\n            <h3 className=\"text-lg\">\n              More than 1 city was found. Please select desired option.\n            </h3>\n            <div className=\"mt-5\">\n              {locationResults.map((l, idx) => (\n                <div\n                  key={l.woeid}\n                  className=\"shadow-sm border-white border p-2 m-2 cursor-pointer hover:bg-red-700\"\n                  onClick={() => handleCitySelect(l)}\n                >\n                  {l.title} {l.latt_long}\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n        {/* Forecast display */}\n        {weatherLoading &&\n          <div className=\"flex items-center mt-8 justify-center\">\n            <div><ReactLoading type=\"spin\" color=\"white\" height={50} width={50}/></div>\n          </div>\n        }\n        <div className=\"flex flex-row mt-6\">\n          {forecast.map((f, idx) => (\n            <div>\n              <WeatherDisplay\n                abbr={f.weather_state_abbr}\n                date={f.applicable_date}\n                desc={f.weather_state_name}\n                key={f.id + idx.toString()}\n                maxTemp={Math.round(f.max_temp || 0)}\n                minTemp={Math.round(f.min_temp || 0)}\n                windSpeed={Math.round(f.wind_speed || 0)}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/mko/Documents/weather-app/src/components/Button.tsx",[],"/Users/mko/Documents/weather-app/src/components/Input.tsx",[],"/Users/mko/Documents/weather-app/src/components/WeatherDisplay.tsx",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":32,"column":5,"nodeType":"37","endLine":32,"endColumn":7,"suggestions":"38"},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'getClientLocation'. Either include it or remove the dependency array.","ArrayExpression",["41"],"no-global-assign","no-unsafe-negation",{"desc":"42","fix":"43"},"Update the dependencies array to be: [getClientLocation]",{"range":"44","text":"45"},[1139,1141],"[getClientLocation]"]